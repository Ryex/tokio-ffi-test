type Box<
    dyn Fn() -> ::std::result::Result<(), crate::tasks::TaskError> + Send
> {
    #layout(size = 16, align = 8);
}

type Box<
    dyn Fn(
        &crate::tasks::TaskContext
    ) -> ::std::result::Result<(), crate::tasks::TaskError> + Send
> {
    #layout(size = 16, align = 8);
}

type Box<
    dyn Fn() -> ::std::result::Result<
        crate::ffi::CxxAny,
        crate::tasks::TaskError
    > + Send
> {
    #layout(size = 16, align = 8);
}

type Box<
    dyn Fn(&crate::tasks::TaskContext) -> ::std::result::Result<
        crate::ffi::CxxAny,
        crate::tasks::TaskError
    > + Send
> {
    #layout(size = 16, align = 8);
}

type Box<
    dyn Fn(
        ::std::result::Result<(), crate::tasks::TaskError>
    ) -> ::std::result::Result<(), crate::tasks::TaskError> + Send
> {
    #layout(size = 16, align = 8);
}

type Box<
    dyn Fn(
        ::std::result::Result<(), crate::tasks::TaskError>,
        &crate::tasks::TaskContext
    ) -> ::std::result::Result<(), crate::tasks::TaskError> + Send
> {
    #layout(size = 16, align = 8);
}

type Box<
    dyn Fn(
        ::std::result::Result<(), crate::tasks::TaskError>
    ) -> ::std::result::Result<
        crate::ffi::CxxAny,
        crate::tasks::TaskError
    > + Send
> {
    #layout(size = 16, align = 8);
}

type Box<
    dyn Fn(
        ::std::result::Result<(), crate::tasks::TaskError>,
        &crate::tasks::TaskContext
    ) -> ::std::result::Result<
        crate::ffi::CxxAny,
        crate::tasks::TaskError
    > + Send
> {
    #layout(size = 16, align = 8);
}



type Box<
    dyn Fn(
        ::std::result::Result<crate::ffi::CxxAny, crate::tasks::TaskError>
    ) -> ::std::result::Result<(), crate::tasks::TaskError> + Send
> {
    #layout(size = 16, align = 8);
}

type Box<
    dyn Fn(
        ::std::result::Result<crate::ffi::CxxAny, crate::tasks::TaskError>,
        &crate::tasks::TaskContext
    ) -> ::std::result::Result<(), crate::tasks::TaskError> + Send
> {
    #layout(size = 16, align = 8);
}

type Box<
    dyn Fn(
        ::std::result::Result<crate::ffi::CxxAny, crate::tasks::TaskError>
    ) -> ::std::result::Result<
        crate::ffi::CxxAny,
        crate::tasks::TaskError
    > + Send
> {
    #layout(size = 16, align = 8);
}

type Box<
    dyn Fn(
        ::std::result::Result<crate::ffi::CxxAny, crate::tasks::TaskError>,
        &crate::tasks::TaskContext
    ) -> ::std::result::Result<
        crate::ffi::CxxAny,
        crate::tasks::TaskError
    > + Send
> {
    #layout(size = 16, align = 8);
}

type Box<dyn Fn(&crate::tasks::TaskProgress) + Send> {
    #layout(size = 16, align = 8);
}


mod std {
    mod option {
        type Option<crate::tasks::TaskOptions> {
            #layout(size = 72, align = 8);
            wellknown_traits(Debug);
            
            constructor None;
            constructor Some(crate::tasks::TaskOptions);

            fn is_some(&self) -> bool;
            fn unwrap(self) -> crate::tasks::TaskOptions;
        }

        type Option<::tokio::task::AbortHandle> {
            #layout(size = 8, align = 8);
            fn is_some(&self) -> bool;
            fn unwrap(self) -> ::tokio::task::AbortHandle;
            fn as_ref(&self) -> Option<&::tokio::task::AbortHandle>;
        }

        type Option<&::tokio::task::AbortHandle> {
            #layout(size = 8, align = 8);
            fn is_some(&self) -> bool;
            fn unwrap(self) -> &::tokio::task::AbortHandle;
        }

        type Option<&::tokio::task::JoinError> {
            #layout(size = 8, align = 8);
            fn is_some(&self) -> bool;
            fn unwrap(self) -> &::tokio::task::JoinError;
        }

        type Option<&crate::tasks::TaskError> {
            #layout(size = 8, align = 8);
            fn is_some(&self) -> bool;
            fn unwrap(self) -> &crate::tasks::TaskError;
        }

        type Option<crate::tasks::TaskError> {
            #layout(size = 40, align = 8);
            fn is_some(&self) -> bool;
            fn unwrap(self) -> crate::tasks::TaskError;
            fn as_ref(&self) -> Option<&crate::tasks::TaskError>;
        }

        type Option<&crate::tasks::TaskSpawnError> {
            #layout(size = 8, align = 8);
            fn is_some(&self) -> bool;
            fn unwrap(self) -> &crate::tasks::TaskSpawnError;
        }

        type Option<crate::tasks::TaskSpawnError> {
            #layout(size = 24, align = 8);
            fn is_some(&self) -> bool;
            fn unwrap(self) -> crate::tasks::TaskSpawnError;
            fn as_ref(&self) -> Option<&crate::tasks::TaskSpawnError>;
        }

        type Option<&crate::tasks::FfiError> {
            #layout(size = 8, align = 8);
            fn is_some(&self) -> bool;
            fn unwrap(self) -> &crate::tasks::FfiError;
        }

        type Option<&crate::tasks::ExternalFfiError> {
            #layout(size = 8, align = 8);
            fn is_some(&self) -> bool;
            fn unwrap(self) -> &crate::tasks::ExternalFfiError;
        }

        type Option<&crate::tasks::IoError> {
            #layout(size = 8, align = 8);
            fn is_some(&self) -> bool;
            fn unwrap(self) -> &crate::tasks::IoError;
        }
    }
}


mod crate::tasks {

    type TaskSpawnError {
        #layout(size = 24, align = 8);
        fn to_string(&self) -> ::std::string::String;
    }

    type TaskError {
        #layout(size = 40, align = 8);

        constructor Error(FfiError);

        fn to_string(&self) -> ::std::string::String;
    }

    type FfiError {
        #layout(size = 40, align = 8);

        constructor External(ExternalFfiError);

        fn to_string(&self) -> ::std::string::String;
    }

    type IoError {
        #layout(size = 32, align = 8);
        fn to_string(&self) -> ::std::string::String;
    }

    type ExternalFfiError {
        #layout(size = 32, align = 8);
        
        fn new(u32, ::std::string::String) -> ExternalFfiError;
        
        fn to_string(&self) -> ::std::string::String;
    }

    type crate::tasks::TaskManager {
        #layout(size = 16, align = 8);

        fn new() -> crate::tasks::TaskManager;

        fn new_blocking<
            (),
            Box<dyn Fn() -> ::std::result::Result<
                (),
                crate::tasks::TaskError
            > + Send>
        >(
            &self,
            Box<dyn Fn() -> ::std::result::Result<
                (),
                crate::tasks::TaskError> + Send
            >,
            ::std::option::Option<TaskOptions>
        ) -> Box<Task<()>>;

        fn new_blocking_with_ctx<
            (),
            Box<dyn Fn(
                &crate::tasks::TaskContext
            ) -> ::std::result::Result<(), crate::tasks::TaskError> + Send>
        >(
            &self,
            Box<dyn Fn(
                &crate::tasks::TaskContext
            ) -> ::std::result::Result<(), crate::tasks::TaskError> + Send>,
            ::std::option::Option<TaskOptions>,
        ) -> Box<Task<()>>;


        fn new_blocking<
            crate::ffi::CxxAny,
            Box<dyn Fn() -> ::std::result::Result<
                crate::ffi::CxxAny,
                crate::tasks::TaskError
            > + Send>
        >(
            &self,
            Box<dyn Fn() -> ::std::result::Result<
                crate::ffi::CxxAny,
                crate::tasks::TaskError
            > + Send>,
            ::std::option::Option<TaskOptions>
        ) -> Box<Task<crate::ffi::CxxAny>>;

        fn new_blocking_with_ctx<
            crate::ffi::CxxAny,
            Box<dyn Fn(
                &crate::tasks::TaskContext
            ) -> ::std::result::Result<
                crate::ffi::CxxAny,
                crate::tasks::TaskError
            > + Send>
        >(
            &self,
            Box<dyn Fn(
                &crate::tasks::TaskContext
            ) -> ::std::result::Result<
                crate::ffi::CxxAny,
                crate::tasks::TaskError
            > + Send>,
            ::std::option::Option<TaskOptions>,
        ) -> Box<Task<crate::ffi::CxxAny>>;
    }

    type Task<()> {
        #layout(size = 72, align = 8);
        fn id(&self) -> ::tokio::task::Id;
        fn manager(&self) -> &TaskManager;
        fn is_finished(&self) -> bool;
        fn is_cancelled(&self) -> bool;
        fn cancel(&self);
        fn on_progress(
            &self,
            Box<dyn Fn(&crate::tasks::TaskProgress) + Send>
        ) -> ::std::option::Option<::tokio::task::AbortHandle>;

        fn then<
            (),
            Box<dyn Fn(
                ::std::result::Result<(), crate::tasks::TaskError>
            ) -> ::std::result::Result<(), crate::tasks::TaskError> + Send>
        > (
            &self,
            Box<dyn Fn(
                ::std::result::Result<(), crate::tasks::TaskError>
            ) -> ::std::result::Result<(), crate::tasks::TaskError> + Send>,
            ::std::option::Option<crate::tasks::TaskOptions>
        ) -> ::std::result::Result<Box<Task<()>>, TaskSpawnError>;
        
        fn then_with_ctx<
            (),
            Box<dyn Fn(
                ::std::result::Result<(), crate::tasks::TaskError>,
                &crate::tasks::TaskContext
            ) -> ::std::result::Result<(), crate::tasks::TaskError> + Send>
        > (
            &self,
            Box<dyn Fn(
                ::std::result::Result<(), crate::tasks::TaskError>,
                &crate::tasks::TaskContext
            ) -> ::std::result::Result<(), crate::tasks::TaskError> + Send>,
            ::std::option::Option<crate::tasks::TaskOptions>
        ) -> ::std::result::Result<Box<Task<()>>, TaskSpawnError>;

        fn then<
            crate::ffi::CxxAny,
            Box<dyn Fn(
                ::std::result::Result<(), crate::tasks::TaskError>
            ) -> ::std::result::Result<
                crate::ffi::CxxAny,
                crate::tasks::TaskError
            > + Send>
        > (
            &self,
            Box<dyn Fn(
                ::std::result::Result<(), crate::tasks::TaskError>
            ) -> ::std::result::Result<
                crate::ffi::CxxAny,
                crate::tasks::TaskError
            > + Send>,
            ::std::option::Option<crate::tasks::TaskOptions>
        ) -> ::std::result::Result<
            Box<Task<crate::ffi::CxxAny>>,
            TaskSpawnError
        >;


        fn then_with_ctx<
            crate::ffi::CxxAny,
            Box<dyn Fn(
                ::std::result::Result<(), crate::tasks::TaskError>,
                &crate::tasks::TaskContext
            ) -> ::std::result::Result<
                crate::ffi::CxxAny,
                crate::tasks::TaskError
            > + Send>
        > (
            &self,
            Box<dyn Fn(
                ::std::result::Result<(), crate::tasks::TaskError>,
                &crate::tasks::TaskContext
            ) -> ::std::result::Result<
                crate::ffi::CxxAny,
                crate::tasks::TaskError
            > + Send>,
            ::std::option::Option<crate::tasks::TaskOptions>
        ) -> ::std::result::Result<
            Box<Task<crate::ffi::CxxAny>>,
            TaskSpawnError
        >;
    }


    type Task<crate::ffi::CxxAny> {
        #layout(size = 72, align = 8);
        fn id(&self) -> ::tokio::task::Id;
        fn manager(&self) -> &TaskManager;
        fn is_finished(&self) -> bool;
        fn is_cancelled(&self) -> bool;
        fn cancel(&self);
        fn on_progress(
            &self,
            Box<dyn Fn(&crate::tasks::TaskProgress) + Send>
        ) -> ::std::option::Option<::tokio::task::AbortHandle>;

        fn then<
            (),
            Box<dyn Fn(
                ::std::result::Result<
                    crate::ffi::CxxAny,
                    crate::tasks::TaskError
                >
            ) -> ::std::result::Result<(), crate::tasks::TaskError> + Send>
        > (
            &self,
            Box<dyn Fn(
                ::std::result::Result<
                    crate::ffi::CxxAny,
                    crate::tasks::TaskError
                >
            ) -> ::std::result::Result<(), crate::tasks::TaskError> + Send>,
            ::std::option::Option<crate::tasks::TaskOptions>
        ) -> ::std::result::Result<Box<Task<()>>, TaskSpawnError>;
        
        fn then_with_ctx<
            (),
            Box<dyn Fn(
                ::std::result::Result<
                    crate::ffi::CxxAny,
                    crate::tasks::TaskError
                >,
                &crate::tasks::TaskContext
            ) -> ::std::result::Result<(), crate::tasks::TaskError> + Send>
        > (
            &self,
            Box<dyn Fn(
                ::std::result::Result<
                    crate::ffi::CxxAny,
                    crate::tasks::TaskError
                >,
                &crate::tasks::TaskContext
            ) -> ::std::result::Result<(), crate::tasks::TaskError> + Send>,
            ::std::option::Option<crate::tasks::TaskOptions>
        ) -> ::std::result::Result<Box<Task<()>>, TaskSpawnError>;

        fn then<
            crate::ffi::CxxAny,
            Box<dyn Fn(
                ::std::result::Result<
                    crate::ffi::CxxAny,
                    crate::tasks::TaskError
                >
            ) -> ::std::result::Result<
                crate::ffi::CxxAny,
                crate::tasks::TaskError
            > + Send>
        > (
            &self,
            Box<dyn Fn(
                ::std::result::Result<
                    crate::ffi::CxxAny,
                    crate::tasks::TaskError
                >
            ) -> ::std::result::Result<
                crate::ffi::CxxAny,
                crate::tasks::TaskError
            > + Send>,
            ::std::option::Option<crate::tasks::TaskOptions>
        ) -> ::std::result::Result<
            Box<Task<crate::ffi::CxxAny>>,
            TaskSpawnError
        >;


        fn then_with_ctx<
            crate::ffi::CxxAny,
            Box<dyn Fn(
                ::std::result::Result<
                    crate::ffi::CxxAny,
                    crate::tasks::TaskError
                >,
                &crate::tasks::TaskContext
            ) -> ::std::result::Result<
                crate::ffi::CxxAny,
                crate::tasks::TaskError
            > + Send>
        > (
            &self,
            Box<dyn Fn(
                ::std::result::Result<
                    crate::ffi::CxxAny,
                    crate::tasks::TaskError
                >,
                &crate::tasks::TaskContext
            ) -> ::std::result::Result<
                crate::ffi::CxxAny,
                crate::tasks::TaskError
            > + Send>,
            ::std::option::Option<crate::tasks::TaskOptions>
        ) -> ::std::result::Result<
            Box<Task<crate::ffi::CxxAny>>,
            TaskSpawnError
        >;
    }
}

mod ::std {
    mod result {
        type Result<Box<crate::tasks::Task<()>>, crate::tasks::TaskSpawnError> {
            #layout(size = 24, align = 8);

            constructor Ok(Box<crate::tasks::Task<()>>);
            constructor Err(crate::tasks::TaskSpawnError);
            
            fn is_ok(&self) -> bool;
            fn is_err(&self) -> bool;
            fn unwrap(self) -> Box<crate::tasks::Task<()>>;
            fn err(self) -> ::std::option::Option<crate::tasks::TaskSpawnError>;
        }

        type Result<(), crate::tasks::TaskError> {
            #layout(size = 40, align = 8);

            constructor Ok(());
            constructor Err(crate::tasks::TaskError);
            
            fn is_ok(&self) -> bool;
            fn is_err(&self) -> bool;
            fn unwrap(self) -> ();
            fn err(self) -> ::std::option::Option<crate::tasks::TaskError>;
        }

        type Result<
            Box<crate::tasks::Task<crate::ffi::CxxAny>>,
            crate::tasks::TaskSpawnError
        > {
            #layout(size = 24, align = 8);

            constructor Ok(Box<crate::tasks::Task<crate::ffi::CxxAny>>);
            constructor Err(crate::tasks::TaskSpawnError);
            
            fn is_ok(&self) -> bool;
            fn is_err(&self) -> bool;
            fn unwrap(self) -> Box<crate::tasks::Task<crate::ffi::CxxAny>>;
            fn err(self) -> ::std::option::Option<crate::tasks::TaskSpawnError>;
        }

        type Result<crate::ffi::CxxAny, crate::tasks::TaskError> {
            #layout(size = 40, align = 8);

            constructor Ok(crate::ffi::CxxAny);
            constructor Err(crate::tasks::TaskError);

            fn is_ok(&self) -> bool;
            fn is_err(&self) -> bool;
            fn unwrap(self) -> crate::ffi::CxxAny;
            fn err(self) -> ::std::option::Option<crate::tasks::TaskError>;
        }
    }
}

type Box<crate::tasks::Task<()>> {
    #layout(size = 8, align = 8);
    fn as_ref(&self) -> &crate::tasks::Task<()>;
}

type Box<crate::tasks::Task<crate::ffi::CxxAny>> {
    #layout(size = 8, align = 8);
    fn as_ref(&self) -> &crate::tasks::Task<crate::ffi::CxxAny>;
}

